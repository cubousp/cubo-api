# Inputs
input CreateParticipantInput {
    name: String!
    email: String!
    kind: ParticipantKind!
}

input UpdateParticipantInput {
    name: String
}

# Payload
type ParticipantsPayload {
    hasMore: Boolean!
    last: ID,
    participants: [Participant!]!
}

# Types
type Participant {
    id: ID!
    name: String!
    email: String!
    enrolled: [Inscription!]!
    authId: String!
    role: Role!
    kind: ParticipantKind!
}

enum ParticipantKind {
    GRADUATING_FOUSP
    POS_GRADUATING_FOUSP
    EXTERNAL_PARTICIPANT
}

type Query {
    participant(id: ID!): Participant! @hasRole(role: ADMIN)
    participants(limit: Int, last: ID): ParticipantsPayload! @hasRole(role: ADMIN)
    me: Participant @isAuthenticated
    searchParticipant(email: String!, limit: Int): [Participant!]!
}

type Mutation {
    createParticipant(input: CreateParticipantInput!): Participant! @hasRole(role: ADMIN)
    enrollToActivity(activityId: ID!): String! @isAuthenticated
    disenrollFromActivity(inscriptionId: String!): String! @isAuthenticated
    signUp(input: CreateParticipantInput): Participant!
    updateProfile(updateParticipant: UpdateParticipantInput!): Participant! @isAuthenticated
}