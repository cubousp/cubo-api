# Inputs
input CreateActivityInput {
    title: String!
    startsAt: DateTime!
    endsAt: DateTime!
    kind: ActivityKind!
    shortDescription: String
    longDescription: String
    internalComment: String
    speaker: CreateSpeakerInput
    inscriptionBeginsAt: DateTime
    inscriptionEndsAt: DateTime
    totalVacancies: Int
    location: String
    visibleForParticipants: Boolean
}

input UpdateActivityInput {
    title: String
    shortDescription: String
    longDescription: String
    startsAt: DateTime
    endsAt: DateTime
    internalComment: String
    speaker: UpdateSpeakerInput
    inscriptionBeginsAt: DateTime
    inscriptionEndsAt: DateTime
    totalVacancies: Int
    kind: ActivityKind
    location: String
    visibleForParticipants: Boolean
}

input CreateSpeakerInput {
    name: String!
    picture: String
    description: String
}

input UpdateSpeakerInput {
    name: String
    picture: String
    description: String
}

# Types
type Activity {
    id: ID!
    title: String!
    shortDescription: String
    longDescription: String
    startsAt: DateTime!
    endsAt: DateTime!
    internalComment: String @hasRole(role: ADMIN)
    speaker: Speaker
    inscriptionBeginsAt: DateTime
    inscriptionEndsAt: DateTime
    enrolled: [Inscription!]! @hasRole(role: ADMIN)
    vacancies: Vacancies! @hasRole(role: ADMIN)
    kind: ActivityKind!
    location: String
    visibleForParticipants: Boolean!
}

enum ActivityKind {
    LECTURE
    WORKSHOP
    HANDSON
    SURGERY
    STAND
    EXPO
}

type Vacancies {
    total: Int!
    available: Int!
}

type Speaker {
    id: ID!
    name: String!
    picture: String
    description: String
}

type Query {
    activity(id: ID!): Activity!
    eventSchedule: [Activity!]!
}

type Mutation {
    createActivity(input: CreateActivityInput!): Activity! @hasRole(role: ADMIN)
    updateActivity(id: ID!, input: UpdateActivityInput!): Activity! @hasRole(role: ADMIN)
    deleteActivity(id: ID!): String! @hasRole(role: ADMIN)
}