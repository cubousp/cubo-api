# Scalars
scalar DateTime

# Enums
enum Role {
    user
    admin
}

enum InscriptionStatus{
    PENDING
    CONFIRMED
    ATTENDED
    MISSED
}

# Directive
directive @isAuthenticated on FIELD | FIELD_DEFINITION
directive @hasRole(role: Role!) on FIELD | FIELD_DEFINITION

# Inputs
input PostToFeedInput {
    message: String!
}

input UpdateStoryInput {
    message: String!
}

input SendEmailToStaffInput {
    name: String!
    email: String!
    phone: String!
    message: String!
}

input CreateSpeakerInput {
    name: String!
    picture: String
    description: String
}

input UpdateSpeakerInput {
    name: String
    picture: String
    description: String
}

input CreateActivityInput {
    title: String!
    shortDescription: String
    longDescription: String
    startsAt: DateTime!
    endsAt: DateTime!
    internalComment: String
    speaker: CreateSpeakerInput
    inscriptionBeginsAt: DateTime
    inscriptionEndsAt: DateTime
}

input UpdateActivityInput {
    title: String
    shortDescription: String
    longDescription: String
    startsAt: DateTime
    endsAt: DateTime
    internalComment: String
    speaker: UpdateSpeakerInput
    inscriptionBeginsAt: DateTime
    inscriptionEndsAt: DateTime
}

input CreateParticipantInput {
    name: String!
}

input CreateInscriptionInput{
    activityId: ID!
    participantId: ID!
}

# Payloads
type FeedPayload {
    hasMore: Boolean!,
    last: ID,
    stories: [Story!]!
}

type ParticipantsPayload {
    hasMore: Boolean!
    last: ID,
    participants: [Participant!]!
}

type CurrentUserPayload {
    email: String!
    name: String!
    picture: String!
}

type AuthPayload {
    token: String!
    user: CurrentUserPayload!
}

# Types
type Story {
    id: ID!
    message: String!
    createdAt: DateTime!
}

type Speaker {
    id: ID!
    name: String!
    picture: String
    description: String
}

type Activity {
    id: ID!
    title: String!
    shortDescription: String
    longDescription: String
    startsAt: DateTime!
    endsAt: DateTime!
    internalComment: String @hasRole(role: admin)
    speaker: Speaker
    inscriptionBeginsAt: DateTime
    inscriptionEndsAt: DateTime
}

type Participant {
    id: ID!
    name: String!
}

type Inscripiton{
    id: ID!
    activity: Activity!
    participant: Participant!
    status: InscriptionStatus!
    createdAt: DateTime!
}

type Query {
    signIn(email: String!, password: String!): AuthPayload!
    signInAsAdmin(email: String!, password: String!): AuthPayload!

    feed(limit: Int, last: ID): FeedPayload! @isAuthenticated

    eventSchedule: [Activity!]!

    participants(limit: Int, last: ID): ParticipantsPayload!
}

type Mutation {
    postToFeed(input: PostToFeedInput!): Story! @hasRole(role: admin)
    updateStory(id: ID!, input: UpdateStoryInput!): Story! @hasRole(role: admin)
    deleteStory(id: ID!): String! @hasRole(role: admin)

    sendEmailToStaff(input: SendEmailToStaffInput!): String!

    createActivity(input: CreateActivityInput!): Activity! @hasRole(role: admin)
    updateActivity(id: ID!, input: UpdateActivityInput!): Activity! @hasRole(role: admin)
    deleteActivity(id: ID!): String! @hasRole(role: admin)

    createParticipant(input: CreateParticipantInput!): Participant! @hasRole(role: admin)

    enrollParticipant(input: CreateInscriptionInput!): Inscripiton! @hasRole(role: admin)
}
