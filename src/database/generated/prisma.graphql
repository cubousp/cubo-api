# source: http://localhost:4466/cubo/dev
# timestamp: Sun Jul 08 2018 13:51:19 GMT-0300 (-03)

type Activity implements Node {
  id: ID!
  title: String!
  shortDescription: String
  longDescription: String
  startsAt: DateTime!
  endsAt: DateTime!
  internalComment: String
  speaker(where: SpeakerWhereInput): Speaker
  createdAt: DateTime!
  updatedAt: DateTime!
  inscriptionBeginsAt: DateTime
  inscriptionEndsAt: DateTime
  enrolled(where: InscriptionWhereInput, orderBy: InscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inscription!]
  vacancies: Int
}

"""A connection to a list of items."""
type ActivityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActivityEdge]!
  aggregate: AggregateActivity!
}

input ActivityCreateInput {
  title: String!
  shortDescription: String
  longDescription: String
  startsAt: DateTime!
  endsAt: DateTime!
  internalComment: String
  inscriptionBeginsAt: DateTime
  inscriptionEndsAt: DateTime
  vacancies: Int
  speaker: SpeakerCreateOneInput
  enrolled: InscriptionCreateManyWithoutActivityInput
}

input ActivityCreateOneWithoutEnrolledInput {
  create: ActivityCreateWithoutEnrolledInput
  connect: ActivityWhereUniqueInput
}

input ActivityCreateWithoutEnrolledInput {
  title: String!
  shortDescription: String
  longDescription: String
  startsAt: DateTime!
  endsAt: DateTime!
  internalComment: String
  inscriptionBeginsAt: DateTime
  inscriptionEndsAt: DateTime
  vacancies: Int
  speaker: SpeakerCreateOneInput
}

"""An edge in a connection."""
type ActivityEdge {
  """The item at the end of the edge."""
  node: Activity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActivityOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  shortDescription_ASC
  shortDescription_DESC
  longDescription_ASC
  longDescription_DESC
  startsAt_ASC
  startsAt_DESC
  endsAt_ASC
  endsAt_DESC
  internalComment_ASC
  internalComment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  inscriptionBeginsAt_ASC
  inscriptionBeginsAt_DESC
  inscriptionEndsAt_ASC
  inscriptionEndsAt_DESC
  vacancies_ASC
  vacancies_DESC
}

type ActivityPreviousValues {
  id: ID!
  title: String!
  shortDescription: String
  longDescription: String
  startsAt: DateTime!
  endsAt: DateTime!
  internalComment: String
  createdAt: DateTime!
  updatedAt: DateTime!
  inscriptionBeginsAt: DateTime
  inscriptionEndsAt: DateTime
  vacancies: Int
}

type ActivitySubscriptionPayload {
  mutation: MutationType!
  node: Activity
  updatedFields: [String!]
  previousValues: ActivityPreviousValues
}

input ActivitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActivityWhereInput
}

input ActivityUpdateInput {
  title: String
  shortDescription: String
  longDescription: String
  startsAt: DateTime
  endsAt: DateTime
  internalComment: String
  inscriptionBeginsAt: DateTime
  inscriptionEndsAt: DateTime
  vacancies: Int
  speaker: SpeakerUpdateOneInput
  enrolled: InscriptionUpdateManyWithoutActivityInput
}

input ActivityUpdateOneWithoutEnrolledInput {
  create: ActivityCreateWithoutEnrolledInput
  connect: ActivityWhereUniqueInput
  delete: Boolean
  update: ActivityUpdateWithoutEnrolledDataInput
  upsert: ActivityUpsertWithoutEnrolledInput
}

input ActivityUpdateWithoutEnrolledDataInput {
  title: String
  shortDescription: String
  longDescription: String
  startsAt: DateTime
  endsAt: DateTime
  internalComment: String
  inscriptionBeginsAt: DateTime
  inscriptionEndsAt: DateTime
  vacancies: Int
  speaker: SpeakerUpdateOneInput
}

input ActivityUpsertWithoutEnrolledInput {
  update: ActivityUpdateWithoutEnrolledDataInput!
  create: ActivityCreateWithoutEnrolledInput!
}

input ActivityWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivityWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  shortDescription: String

  """All values that are not equal to given value."""
  shortDescription_not: String

  """All values that are contained in given list."""
  shortDescription_in: [String!]

  """All values that are not contained in given list."""
  shortDescription_not_in: [String!]

  """All values less than the given value."""
  shortDescription_lt: String

  """All values less than or equal the given value."""
  shortDescription_lte: String

  """All values greater than the given value."""
  shortDescription_gt: String

  """All values greater than or equal the given value."""
  shortDescription_gte: String

  """All values containing the given string."""
  shortDescription_contains: String

  """All values not containing the given string."""
  shortDescription_not_contains: String

  """All values starting with the given string."""
  shortDescription_starts_with: String

  """All values not starting with the given string."""
  shortDescription_not_starts_with: String

  """All values ending with the given string."""
  shortDescription_ends_with: String

  """All values not ending with the given string."""
  shortDescription_not_ends_with: String
  longDescription: String

  """All values that are not equal to given value."""
  longDescription_not: String

  """All values that are contained in given list."""
  longDescription_in: [String!]

  """All values that are not contained in given list."""
  longDescription_not_in: [String!]

  """All values less than the given value."""
  longDescription_lt: String

  """All values less than or equal the given value."""
  longDescription_lte: String

  """All values greater than the given value."""
  longDescription_gt: String

  """All values greater than or equal the given value."""
  longDescription_gte: String

  """All values containing the given string."""
  longDescription_contains: String

  """All values not containing the given string."""
  longDescription_not_contains: String

  """All values starting with the given string."""
  longDescription_starts_with: String

  """All values not starting with the given string."""
  longDescription_not_starts_with: String

  """All values ending with the given string."""
  longDescription_ends_with: String

  """All values not ending with the given string."""
  longDescription_not_ends_with: String
  startsAt: DateTime

  """All values that are not equal to given value."""
  startsAt_not: DateTime

  """All values that are contained in given list."""
  startsAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startsAt_not_in: [DateTime!]

  """All values less than the given value."""
  startsAt_lt: DateTime

  """All values less than or equal the given value."""
  startsAt_lte: DateTime

  """All values greater than the given value."""
  startsAt_gt: DateTime

  """All values greater than or equal the given value."""
  startsAt_gte: DateTime
  endsAt: DateTime

  """All values that are not equal to given value."""
  endsAt_not: DateTime

  """All values that are contained in given list."""
  endsAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endsAt_not_in: [DateTime!]

  """All values less than the given value."""
  endsAt_lt: DateTime

  """All values less than or equal the given value."""
  endsAt_lte: DateTime

  """All values greater than the given value."""
  endsAt_gt: DateTime

  """All values greater than or equal the given value."""
  endsAt_gte: DateTime
  internalComment: String

  """All values that are not equal to given value."""
  internalComment_not: String

  """All values that are contained in given list."""
  internalComment_in: [String!]

  """All values that are not contained in given list."""
  internalComment_not_in: [String!]

  """All values less than the given value."""
  internalComment_lt: String

  """All values less than or equal the given value."""
  internalComment_lte: String

  """All values greater than the given value."""
  internalComment_gt: String

  """All values greater than or equal the given value."""
  internalComment_gte: String

  """All values containing the given string."""
  internalComment_contains: String

  """All values not containing the given string."""
  internalComment_not_contains: String

  """All values starting with the given string."""
  internalComment_starts_with: String

  """All values not starting with the given string."""
  internalComment_not_starts_with: String

  """All values ending with the given string."""
  internalComment_ends_with: String

  """All values not ending with the given string."""
  internalComment_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  inscriptionBeginsAt: DateTime

  """All values that are not equal to given value."""
  inscriptionBeginsAt_not: DateTime

  """All values that are contained in given list."""
  inscriptionBeginsAt_in: [DateTime!]

  """All values that are not contained in given list."""
  inscriptionBeginsAt_not_in: [DateTime!]

  """All values less than the given value."""
  inscriptionBeginsAt_lt: DateTime

  """All values less than or equal the given value."""
  inscriptionBeginsAt_lte: DateTime

  """All values greater than the given value."""
  inscriptionBeginsAt_gt: DateTime

  """All values greater than or equal the given value."""
  inscriptionBeginsAt_gte: DateTime
  inscriptionEndsAt: DateTime

  """All values that are not equal to given value."""
  inscriptionEndsAt_not: DateTime

  """All values that are contained in given list."""
  inscriptionEndsAt_in: [DateTime!]

  """All values that are not contained in given list."""
  inscriptionEndsAt_not_in: [DateTime!]

  """All values less than the given value."""
  inscriptionEndsAt_lt: DateTime

  """All values less than or equal the given value."""
  inscriptionEndsAt_lte: DateTime

  """All values greater than the given value."""
  inscriptionEndsAt_gt: DateTime

  """All values greater than or equal the given value."""
  inscriptionEndsAt_gte: DateTime
  vacancies: Int

  """All values that are not equal to given value."""
  vacancies_not: Int

  """All values that are contained in given list."""
  vacancies_in: [Int!]

  """All values that are not contained in given list."""
  vacancies_not_in: [Int!]

  """All values less than the given value."""
  vacancies_lt: Int

  """All values less than or equal the given value."""
  vacancies_lte: Int

  """All values greater than the given value."""
  vacancies_gt: Int

  """All values greater than or equal the given value."""
  vacancies_gte: Int
  speaker: SpeakerWhereInput
  enrolled_every: InscriptionWhereInput
  enrolled_some: InscriptionWhereInput
  enrolled_none: InscriptionWhereInput
}

input ActivityWhereUniqueInput {
  id: ID
}

type AggregateActivity {
  count: Int!
}

type AggregateInscription {
  count: Int!
}

type AggregateParticipant {
  count: Int!
}

type AggregateSpeaker {
  count: Int!
}

type AggregateStory {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Inscription implements Node {
  id: ID!
  activity(where: ActivityWhereInput): Activity!
  participant(where: ParticipantWhereInput): Participant!
  status: InscriptionStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type InscriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InscriptionEdge]!
  aggregate: AggregateInscription!
}

input InscriptionCreateInput {
  status: InscriptionStatus
  activity: ActivityCreateOneWithoutEnrolledInput!
  participant: ParticipantCreateOneWithoutEnrolledInput!
}

input InscriptionCreateManyWithoutActivityInput {
  create: [InscriptionCreateWithoutActivityInput!]
  connect: [InscriptionWhereUniqueInput!]
}

input InscriptionCreateManyWithoutParticipantInput {
  create: [InscriptionCreateWithoutParticipantInput!]
  connect: [InscriptionWhereUniqueInput!]
}

input InscriptionCreateWithoutActivityInput {
  status: InscriptionStatus
  participant: ParticipantCreateOneWithoutEnrolledInput!
}

input InscriptionCreateWithoutParticipantInput {
  status: InscriptionStatus
  activity: ActivityCreateOneWithoutEnrolledInput!
}

"""An edge in a connection."""
type InscriptionEdge {
  """The item at the end of the edge."""
  node: Inscription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InscriptionOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InscriptionPreviousValues {
  id: ID!
  status: InscriptionStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum InscriptionStatus {
  PENDING
  CONFIRMED
  ATTENDED
  MISSED
}

type InscriptionSubscriptionPayload {
  mutation: MutationType!
  node: Inscription
  updatedFields: [String!]
  previousValues: InscriptionPreviousValues
}

input InscriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InscriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InscriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InscriptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InscriptionWhereInput
}

input InscriptionUpdateInput {
  status: InscriptionStatus
  activity: ActivityUpdateOneWithoutEnrolledInput
  participant: ParticipantUpdateOneWithoutEnrolledInput
}

input InscriptionUpdateManyWithoutActivityInput {
  create: [InscriptionCreateWithoutActivityInput!]
  connect: [InscriptionWhereUniqueInput!]
  disconnect: [InscriptionWhereUniqueInput!]
  delete: [InscriptionWhereUniqueInput!]
  update: [InscriptionUpdateWithWhereUniqueWithoutActivityInput!]
  upsert: [InscriptionUpsertWithWhereUniqueWithoutActivityInput!]
}

input InscriptionUpdateManyWithoutParticipantInput {
  create: [InscriptionCreateWithoutParticipantInput!]
  connect: [InscriptionWhereUniqueInput!]
  disconnect: [InscriptionWhereUniqueInput!]
  delete: [InscriptionWhereUniqueInput!]
  update: [InscriptionUpdateWithWhereUniqueWithoutParticipantInput!]
  upsert: [InscriptionUpsertWithWhereUniqueWithoutParticipantInput!]
}

input InscriptionUpdateWithoutActivityDataInput {
  status: InscriptionStatus
  participant: ParticipantUpdateOneWithoutEnrolledInput
}

input InscriptionUpdateWithoutParticipantDataInput {
  status: InscriptionStatus
  activity: ActivityUpdateOneWithoutEnrolledInput
}

input InscriptionUpdateWithWhereUniqueWithoutActivityInput {
  where: InscriptionWhereUniqueInput!
  data: InscriptionUpdateWithoutActivityDataInput!
}

input InscriptionUpdateWithWhereUniqueWithoutParticipantInput {
  where: InscriptionWhereUniqueInput!
  data: InscriptionUpdateWithoutParticipantDataInput!
}

input InscriptionUpsertWithWhereUniqueWithoutActivityInput {
  where: InscriptionWhereUniqueInput!
  update: InscriptionUpdateWithoutActivityDataInput!
  create: InscriptionCreateWithoutActivityInput!
}

input InscriptionUpsertWithWhereUniqueWithoutParticipantInput {
  where: InscriptionWhereUniqueInput!
  update: InscriptionUpdateWithoutParticipantDataInput!
  create: InscriptionCreateWithoutParticipantInput!
}

input InscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InscriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: InscriptionStatus

  """All values that are not equal to given value."""
  status_not: InscriptionStatus

  """All values that are contained in given list."""
  status_in: [InscriptionStatus!]

  """All values that are not contained in given list."""
  status_not_in: [InscriptionStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  activity: ActivityWhereInput
  participant: ParticipantWhereInput
}

input InscriptionWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createStory(data: StoryCreateInput!): Story!
  createActivity(data: ActivityCreateInput!): Activity!
  createSpeaker(data: SpeakerCreateInput!): Speaker!
  createParticipant(data: ParticipantCreateInput!): Participant!
  createInscription(data: InscriptionCreateInput!): Inscription!
  updateStory(data: StoryUpdateInput!, where: StoryWhereUniqueInput!): Story
  updateActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity
  updateSpeaker(data: SpeakerUpdateInput!, where: SpeakerWhereUniqueInput!): Speaker
  updateParticipant(data: ParticipantUpdateInput!, where: ParticipantWhereUniqueInput!): Participant
  updateInscription(data: InscriptionUpdateInput!, where: InscriptionWhereUniqueInput!): Inscription
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteSpeaker(where: SpeakerWhereUniqueInput!): Speaker
  deleteParticipant(where: ParticipantWhereUniqueInput!): Participant
  deleteInscription(where: InscriptionWhereUniqueInput!): Inscription
  upsertStory(where: StoryWhereUniqueInput!, create: StoryCreateInput!, update: StoryUpdateInput!): Story!
  upsertActivity(where: ActivityWhereUniqueInput!, create: ActivityCreateInput!, update: ActivityUpdateInput!): Activity!
  upsertSpeaker(where: SpeakerWhereUniqueInput!, create: SpeakerCreateInput!, update: SpeakerUpdateInput!): Speaker!
  upsertParticipant(where: ParticipantWhereUniqueInput!, create: ParticipantCreateInput!, update: ParticipantUpdateInput!): Participant!
  upsertInscription(where: InscriptionWhereUniqueInput!, create: InscriptionCreateInput!, update: InscriptionUpdateInput!): Inscription!
  updateManyStories(data: StoryUpdateInput!, where: StoryWhereInput): BatchPayload!
  updateManyActivities(data: ActivityUpdateInput!, where: ActivityWhereInput): BatchPayload!
  updateManySpeakers(data: SpeakerUpdateInput!, where: SpeakerWhereInput): BatchPayload!
  updateManyParticipants(data: ParticipantUpdateInput!, where: ParticipantWhereInput): BatchPayload!
  updateManyInscriptions(data: InscriptionUpdateInput!, where: InscriptionWhereInput): BatchPayload!
  deleteManyStories(where: StoryWhereInput): BatchPayload!
  deleteManyActivities(where: ActivityWhereInput): BatchPayload!
  deleteManySpeakers(where: SpeakerWhereInput): BatchPayload!
  deleteManyParticipants(where: ParticipantWhereInput): BatchPayload!
  deleteManyInscriptions(where: InscriptionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Participant implements Node {
  id: ID!
  name: String!
  enrolled(where: InscriptionWhereInput, orderBy: InscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inscription!]
}

"""A connection to a list of items."""
type ParticipantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ParticipantEdge]!
  aggregate: AggregateParticipant!
}

input ParticipantCreateInput {
  name: String!
  enrolled: InscriptionCreateManyWithoutParticipantInput
}

input ParticipantCreateOneWithoutEnrolledInput {
  create: ParticipantCreateWithoutEnrolledInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutEnrolledInput {
  name: String!
}

"""An edge in a connection."""
type ParticipantEdge {
  """The item at the end of the edge."""
  node: Participant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ParticipantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ParticipantPreviousValues {
  id: ID!
  name: String!
}

type ParticipantSubscriptionPayload {
  mutation: MutationType!
  node: Participant
  updatedFields: [String!]
  previousValues: ParticipantPreviousValues
}

input ParticipantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ParticipantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ParticipantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ParticipantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ParticipantWhereInput
}

input ParticipantUpdateInput {
  name: String
  enrolled: InscriptionUpdateManyWithoutParticipantInput
}

input ParticipantUpdateOneWithoutEnrolledInput {
  create: ParticipantCreateWithoutEnrolledInput
  connect: ParticipantWhereUniqueInput
  delete: Boolean
  update: ParticipantUpdateWithoutEnrolledDataInput
  upsert: ParticipantUpsertWithoutEnrolledInput
}

input ParticipantUpdateWithoutEnrolledDataInput {
  name: String
}

input ParticipantUpsertWithoutEnrolledInput {
  update: ParticipantUpdateWithoutEnrolledDataInput!
  create: ParticipantCreateWithoutEnrolledInput!
}

input ParticipantWhereInput {
  """Logical AND on all given filters."""
  AND: [ParticipantWhereInput!]

  """Logical OR on all given filters."""
  OR: [ParticipantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ParticipantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  enrolled_every: InscriptionWhereInput
  enrolled_some: InscriptionWhereInput
  enrolled_none: InscriptionWhereInput
}

input ParticipantWhereUniqueInput {
  id: ID
}

type Query {
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story]!
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity]!
  speakers(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Speaker]!
  participants(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Participant]!
  inscriptions(where: InscriptionWhereInput, orderBy: InscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inscription]!
  story(where: StoryWhereUniqueInput!): Story
  activity(where: ActivityWhereUniqueInput!): Activity
  speaker(where: SpeakerWhereUniqueInput!): Speaker
  participant(where: ParticipantWhereUniqueInput!): Participant
  inscription(where: InscriptionWhereUniqueInput!): Inscription
  storiesConnection(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection!
  activitiesConnection(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityConnection!
  speakersConnection(where: SpeakerWhereInput, orderBy: SpeakerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpeakerConnection!
  participantsConnection(where: ParticipantWhereInput, orderBy: ParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParticipantConnection!
  inscriptionsConnection(where: InscriptionWhereInput, orderBy: InscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InscriptionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Speaker implements Node {
  id: ID!
  name: String!
  picture: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SpeakerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpeakerEdge]!
  aggregate: AggregateSpeaker!
}

input SpeakerCreateInput {
  name: String!
  picture: String
  description: String
}

input SpeakerCreateOneInput {
  create: SpeakerCreateInput
  connect: SpeakerWhereUniqueInput
}

"""An edge in a connection."""
type SpeakerEdge {
  """The item at the end of the edge."""
  node: Speaker!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpeakerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SpeakerPreviousValues {
  id: ID!
  name: String!
  picture: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SpeakerSubscriptionPayload {
  mutation: MutationType!
  node: Speaker
  updatedFields: [String!]
  previousValues: SpeakerPreviousValues
}

input SpeakerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeakerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeakerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeakerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpeakerWhereInput
}

input SpeakerUpdateDataInput {
  name: String
  picture: String
  description: String
}

input SpeakerUpdateInput {
  name: String
  picture: String
  description: String
}

input SpeakerUpdateOneInput {
  create: SpeakerCreateInput
  connect: SpeakerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SpeakerUpdateDataInput
  upsert: SpeakerUpsertNestedInput
}

input SpeakerUpsertNestedInput {
  update: SpeakerUpdateDataInput!
  create: SpeakerCreateInput!
}

input SpeakerWhereInput {
  """Logical AND on all given filters."""
  AND: [SpeakerWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpeakerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpeakerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input SpeakerWhereUniqueInput {
  id: ID
}

type Story implements Node {
  id: ID!
  message: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type StoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StoryEdge]!
  aggregate: AggregateStory!
}

input StoryCreateInput {
  message: String!
}

"""An edge in a connection."""
type StoryEdge {
  """The item at the end of the edge."""
  node: Story!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StoryOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StoryPreviousValues {
  id: ID!
  message: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StorySubscriptionPayload {
  mutation: MutationType!
  node: Story
  updatedFields: [String!]
  previousValues: StoryPreviousValues
}

input StorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StoryWhereInput
}

input StoryUpdateInput {
  message: String
}

input StoryWhereInput {
  """Logical AND on all given filters."""
  AND: [StoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input StoryWhereUniqueInput {
  id: ID
}

type Subscription {
  story(where: StorySubscriptionWhereInput): StorySubscriptionPayload
  activity(where: ActivitySubscriptionWhereInput): ActivitySubscriptionPayload
  speaker(where: SpeakerSubscriptionWhereInput): SpeakerSubscriptionPayload
  participant(where: ParticipantSubscriptionWhereInput): ParticipantSubscriptionPayload
  inscription(where: InscriptionSubscriptionWhereInput): InscriptionSubscriptionPayload
}
